//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModbusIntegratorEvent.ModbusIntegratorServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ModbusIntegratorServiceReference.IModbusIntegratorEventService", CallbackContract=typeof(ModbusIntegratorEvent.ModbusIntegratorServiceReference.IModbusIntegratorEventServiceCallback))]
    public interface IModbusIntegratorEventService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IModbusIntegratorEventService/RegisterForUpdates")]
        void RegisterForUpdates(System.Guid clientId, string[] categories);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IModbusIntegratorEventService/UpdateProperty")]
        void UpdateProperty(System.Guid clientId, string category, string pointname, string propname, string value, bool nocash);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IModbusIntegratorEventService/Disconnect")]
        void Disconnect(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IModbusIntegratorEventService/SubscribeValues")]
        void SubscribeValues(System.Guid clientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IModbusIntegratorEventServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IModbusIntegratorEventService/PropertyUpdated")]
        void PropertyUpdated(System.DateTime servertime, string category, string pointname, string propname, string value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IModbusIntegratorEventServiceChannel : ModbusIntegratorEvent.ModbusIntegratorServiceReference.IModbusIntegratorEventService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModbusIntegratorEventServiceClient : System.ServiceModel.DuplexClientBase<ModbusIntegratorEvent.ModbusIntegratorServiceReference.IModbusIntegratorEventService>, ModbusIntegratorEvent.ModbusIntegratorServiceReference.IModbusIntegratorEventService {
        
        public ModbusIntegratorEventServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ModbusIntegratorEventServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ModbusIntegratorEventServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ModbusIntegratorEventServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ModbusIntegratorEventServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterForUpdates(System.Guid clientId, string[] categories) {
            base.Channel.RegisterForUpdates(clientId, categories);
        }
        
        public void UpdateProperty(System.Guid clientId, string category, string pointname, string propname, string value, bool nocash) {
            base.Channel.UpdateProperty(clientId, category, pointname, propname, value, nocash);
        }
        
        public void Disconnect(System.Guid clientId) {
            base.Channel.Disconnect(clientId);
        }
        
        public void SubscribeValues(System.Guid clientId) {
            base.Channel.SubscribeValues(clientId);
        }
    }
}
